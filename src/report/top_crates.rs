use super::{Report, ReportConfig, ReportData};
use crate::util::percentage;

use std::{
    fs::File,
    io::Read,
    path::{Path, PathBuf},
};

use fehler::throws;
use rust_playground_top_crates::Modifications;
use serde::Deserialize;
use stable_eyre::eyre::{Error, WrapErr};

#[derive(Debug)]
pub(super) struct TopCrateInfo {
    name: String,
    version: semver::Version,
    id: String,
}

impl Report {
    #[throws]
    pub(super) async fn top_crates(&self, _config: &ReportConfig) -> Vec<TopCrateInfo> {
        let path = self.data_dir.join("crate-information.json");

        // if the `crate-information.json` doesn't exist, generate it
        if !path.exists() {
            let copy_data_dir = self.data_dir.to_path_buf();
            tokio::task::spawn_blocking(move || generate_crate_information(&copy_data_dir))
                .await
                .wrap_err("Failed to spawn blocking task")?
                .wrap_err("Failed to generate top-crates files")?;
        }

        tokio::task::spawn_blocking(move || load_top_crates(&path))
            .await
            .wrap_err("Failed to load top crates")??
    }

    #[throws]
    pub(super) fn write_top_crates(&self, _config: &ReportConfig, data: &ReportData) {
        let stable_crates = data
            .top_crates
            .iter()
            .filter(|c| c.version.major >= 1)
            .count() as u64;
        let total_crates = data.top_crates.len() as u64;
        let percentage = percentage(stable_crates, total_crates);

        let output = self.output_dir().join("top_crate.csv");
        let output_file = &mut File::create(output.clone())
            .wrap_err_with(|| format!("Failed to create file from path {:?}", &output))?;

        let mut csv = csv::Writer::from_writer(output_file);

        csv.write_record(&["Measurement".to_string(), "Value".to_string()])
            .wrap_err("Failed to write headers while writing top crates")?;

        csv.write_record(&[
            "Total 'significant' crates".to_string(),
            total_crates.to_string(),
        ])
        .wrap_err("Failed to write Total Significant Crates while writing top crates")?;

        csv.write_record(&[
            "crates at 1.0 or higher".to_string(),
            percentage.to_string(),
        ])
        .wrap_err("Failed to write High Percentage crates while writing top crates")?;
    }
}

/// Loads the `crate-information.json` generated by the [top-crates playground code][pc].
///
/// [pc]: https://github.com/integer32llc/rust-playground/tree/master/top-crates
#[throws]
fn load_top_crates(path: &Path) -> Vec<TopCrateInfo> {
    #[derive(Deserialize)]
    struct TC {
        name: String,
        version: String,
        id: String,
    }
    let data = std::fs::read_to_string(&path.clone())
        .wrap_err_with(|| format!("Failed to read data from path {:?}", &path))?;
    let data: Vec<TC> = serde_json::from_str(&data)
        .wrap_err_with(|| format!("Failed to serialize data: {}", data))?;
    let mut vec = Vec::new();
    for TC { name, version, id } in data {
        let version = semver::Version::parse(&version.clone())
            .wrap_err_with(|| format!("Failed to parse version from {}", version))?;
        vec.push(TopCrateInfo { name, version, id });
    }
    vec
}

#[throws]
pub fn generate_crate_information(base_directory: &PathBuf) {
    let mut f = File::open("crate-modifications.toml")
        .wrap_err("unable to open crate modifications file")?;

    let mut d = Vec::new();

    f.read_to_end(&mut d)
        .wrap_err("unable to read crate modifications file")?;

    let modifications: Modifications =
        toml::from_slice(&d).wrap_err("unable to parse crate modifications file")?;

    let (_, infos) = rust_playground_top_crates::generate_info(&modifications);

    let path = base_directory.join("crate-information.json");
    let mut f =
        File::create(&path).wrap_err_with(|| format!("Unable to create {}", path.display()))?;
    serde_json::to_writer_pretty(&mut f, &infos)
        .wrap_err_with(|| format!("Unable to write {}", path.display()))?;
}
